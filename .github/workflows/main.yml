name: Example Workflow (Build and Push)

run-name: Build ${{ github.ref_name }} image

on:
  push:

jobs:
  build-and-push:
    name: "Ofleet : build & push"
    runs-on: ubuntu-latest
    container: ofleet/builder:v1-stable
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo from branch
        uses: actions/checkout@v4
        with:
          submodules: recursive
#          token: ${{ secrets.SUBMODULE_PRIVATE_TOKEN }}     if you need to checkout submodules with private token

      - name: Set registry variable 
        run: |
          if [[ -n "${{ vars.DOCKER_REGISTRY }}" && -n "${{ vars.DOCKER_USERNAME }}" ]]; then
            echo "Using custom registry"
            echo "${{ vars.DOCKER_REGISTRY }}" >> $DOCKER_REGISTRY
            echo "${{ vars.DOCKER_USERNAME }}" >> $DOCKER_USERNAME
            echo "${{ secrets.DOCKER_PASSWORD }}" >> $DOCKER_PASSWORD
          else
            echo "Using GitHub Container Registry (GHCR)"
            echo "ghcr.io" >> $DOCKER_REGISTRY
            echo "${{github.actor}}" >> $DOCKER_USERNAME
            echo "${{secrets.GITHUB_TOKEN}}" >> $DOCKER_PASSWORD
          fi
      - name: Build and push image
        env:
          OFLEET_ODOO_IMAGE: ${{ vars.OFLEET_ODOO_IMAGE }}
        run: |
          ofleet-prepare ${OFLEET_ODOO_IMAGE} ${GITHUB_WORKSPACE}
          ofleet-build ${DOCKER_REGISTRY}/${GITHUB_REPOSITORY}:${{github.ref_name}}-${GITHUB_SHA} ${DOCKER_REGISTRY} ${DOCKER_USERNAME} ${DOCKER_PASSWORD} ${GITHUB_WORKSPACE}

  deploy:
    name: "Trigger Deployment"
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref_type != 'tag'  # Exécute ce job seulement si ce n'est pas un tag
    env:
      OFLEET_TOKEN: ${{ secrets.OFLEET_TOKEN }}  # Assurez-vous de définir ce secret dans le repo
    steps:
      - name: Deploy to Ofleet
        run: |
          curl -X 'POST' \
            'https://console.ofleet.cloud/api/ofleet/v1/openapi/instance/odoo/cloneAsTest' \
            -H 'accept: application/json' \
            -H "Authorization: Bearer ${OFLEET_TOKEN}" \
            -H 'Content-Type: application/json' \
            -d '{
              "projectName": "${ secrets.OFLEET_PROJECT_ID} ",
              "origin": "${ secrets.OFLEET_PRODUCTION_ID} ",
              "name": "${ github.ref_name }",
              "displayName": "Branche ${ github.ref_name }",
              "tag": "${{github.ref_name}}-${GITHUB_SHA}",
              "cloneData": true,
              "forceWriteData": false,
              "readonlyFilestore": true,
              "autoShutdown": true
          }' \
          --fail
